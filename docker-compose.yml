services:
  postgres:
    image: postgres:16-alpine
    container_name: microbrsoil-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backnet

  redis:
    image: redis:7-alpine
    container_name: microbrsoil-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - backnet

  backend-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: microbrsoil-backend
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgres://${POSTGRES_USER:-micro}:${POSTGRES_PASSWORD:-micro_password}@postgres:5432/${POSTGRES_DB:-microbrsoil}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-change_me}
      UPLOADS_DIR: /app/uploads
      RESULTS_DIR: /app/results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./logs:/app/logs
      - ./mock_results_csv:/app/mock_results_csv
      - ./pipeline-r:/app/pipeline-r:ro
      - ./db:/app/db:ro
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    networks:
      - backnet

  # Worker: Node + R to run the pipeline in background via BullMQ
  worker:
    build:
      context: .
      dockerfile: backend/${WORKER_DOCKERFILE:-Dockerfile.worker}
    container_name: microbrsoil-worker
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgres://${POSTGRES_USER:-micro}:${POSTGRES_PASSWORD:-micro_password}@postgres:5432/${POSTGRES_DB:-microbrsoil}
      REDIS_URL: redis://redis:6379
      UPLOADS_DIR: /app/uploads
      RESULTS_DIR: /app/results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./logs:/app/logs
      - ./mock_results_csv:/app/mock_results_csv
      - ./pipeline-r:/app/pipeline-r:ro
      - ./db:/app/db:ro
      - r-packages:/usr/local/lib/R/site-library
    networks:
      - backnet

  # Static front-end (HTML/CSS/JS) served by nginx
  frontend:
    image: nginx:1.27-alpine
    container_name: microbrsoil-frontend
    volumes:
      - ./src:/usr/share/nginx/html:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    depends_on:
      - backend-api
    networks:
      - backnet

volumes:
  db-data:
  redis-data:
  r-packages:

networks:
  backnet:
    driver: bridge
