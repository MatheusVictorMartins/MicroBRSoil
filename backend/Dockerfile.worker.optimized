# Optimized R package installation with build-time caching
FROM rocker/r-ver:4.3.2

ENV DEBIAN_FRONTEND=noninteractive
WORKDIR /app

# Install system dependencies in optimal order for Docker layer caching
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    gnupg \
    build-essential \
    gfortran \
    libbz2-dev \
    liblzma-dev \
    libpcre2-dev \
    libcurl4-openssl-dev \
    libssl-dev \
    zlib1g-dev \
    libxml2-dev \
    libgit2-dev \
    libfontconfig1-dev \
    libcairo2-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libfreetype6-dev \
    libpng-dev \
    libtiff5-dev \
    libjpeg-dev \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install R packages at BUILD TIME for better caching and reliability
# This layer will be cached unless R packages change
RUN Rscript -e "options(repos = c(CRAN = 'https://cloud.r-project.org')); install.packages('BiocManager')" && \
    Rscript -e "BiocManager::install(c('dada2', 'phyloseq', 'ShortRead', 'Biostrings'), ask=FALSE, update=FALSE)" && \
    Rscript -e "install.packages(c('ggplot2', 'vegan', 'dplyr', 'scales', 'farver', 'labeling'), repos='https://cloud.r-project.org')" && \
    Rscript -e "library(dada2); library(phyloseq); library(ggplot2); cat('All R packages installed and verified at build time\n')"

# Copy package files and install Node dependencies
COPY package*.json ./
RUN npm ci

# Copy application source
COPY . .

# Create minimal startup script (packages already installed)
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🚀 Starting MicroBRSoil Worker (Optimized Build)"\n\
echo "R version: $(R --version | head -1)"\n\
echo "Node version: $(node --version)"\n\
\n\
# Quick verification that packages are available\n\
if Rscript -e "library(dada2); library(phyloseq); library(ggplot2)" 2>/dev/null; then\n\
  echo "✅ All R packages verified and ready"\n\
else\n\
  echo "❌ R package verification failed - this should not happen with build-time installation"\n\
  exit 1\n\
fi\n\
\n\
echo "🎯 Starting worker process..."\n\
exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["npm", "run", "worker"]
